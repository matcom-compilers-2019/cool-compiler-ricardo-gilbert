//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Cool.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="CoolParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface ICoolListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="CoolParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] CoolParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CoolParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] CoolParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CoolParser.classDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDefine([NotNull] CoolParser.ClassDefineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CoolParser.classDefine"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDefine([NotNull] CoolParser.ClassDefineContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CoolParser.feature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFeature([NotNull] CoolParser.FeatureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CoolParser.feature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFeature([NotNull] CoolParser.FeatureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CoolParser.method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod([NotNull] CoolParser.MethodContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CoolParser.method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod([NotNull] CoolParser.MethodContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CoolParser.property"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProperty([NotNull] CoolParser.PropertyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CoolParser.property"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProperty([NotNull] CoolParser.PropertyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CoolParser.formal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormal([NotNull] CoolParser.FormalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CoolParser.formal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormal([NotNull] CoolParser.FormalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>new</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNew([NotNull] CoolParser.NewContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>new</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNew([NotNull] CoolParser.NewContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>letIn</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLetIn([NotNull] CoolParser.LetInContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>letIn</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLetIn([NotNull] CoolParser.LetInContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParens([NotNull] CoolParser.ParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParens([NotNull] CoolParser.ParensContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] CoolParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] CoolParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>isvoid</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsvoid([NotNull] CoolParser.IsvoidContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>isvoid</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsvoid([NotNull] CoolParser.IsvoidContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addsub</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddsub([NotNull] CoolParser.AddsubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addsub</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddsub([NotNull] CoolParser.AddsubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bitcompl</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitcompl([NotNull] CoolParser.BitcomplContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bitcompl</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitcompl([NotNull] CoolParser.BitcomplContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>while</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile([NotNull] CoolParser.WhileContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>while</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile([NotNull] CoolParser.WhileContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>comparer</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparer([NotNull] CoolParser.ComparerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>comparer</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparer([NotNull] CoolParser.ComparerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dispatchImplicit</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDispatchImplicit([NotNull] CoolParser.DispatchImplicitContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dispatchImplicit</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDispatchImplicit([NotNull] CoolParser.DispatchImplicitContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInt([NotNull] CoolParser.IntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInt([NotNull] CoolParser.IntContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>muldiv</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMuldiv([NotNull] CoolParser.MuldivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>muldiv</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMuldiv([NotNull] CoolParser.MuldivContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNot([NotNull] CoolParser.NotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>not</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNot([NotNull] CoolParser.NotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>boolean</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolean([NotNull] CoolParser.BooleanContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolean</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolean([NotNull] CoolParser.BooleanContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>block</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] CoolParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>block</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] CoolParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] CoolParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] CoolParser.IdContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>if</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf([NotNull] CoolParser.IfContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>if</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf([NotNull] CoolParser.IfContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>case</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCase([NotNull] CoolParser.CaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>case</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCase([NotNull] CoolParser.CaseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dispatchExplicit</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDispatchExplicit([NotNull] CoolParser.DispatchExplicitContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dispatchExplicit</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDispatchExplicit([NotNull] CoolParser.DispatchExplicitContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] CoolParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="CoolParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] CoolParser.AssignContext context);
}
